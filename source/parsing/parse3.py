#!/usr/bin/python
import re

data = '''
/* Branch on Greater Than or Equal to Zero: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BGEZ           0b00000100000000010000000000000000
#define MASK_BGEZ_FORM      0b11111100000111110000000000000000
#define MASK_BGEZ_RS        0b00000011111000000000000000000000
#define MASK_BGEZ_OFFSET    0b00000000000000001111111111111111

/* Branch on Greater Than or Equal to Zero and Link: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BGEZAL         0b00000100000100010000000000000000
#define MASK_BGEZAL_FORM    0b11111100000111110000000000000000
#define MASK_BGEZAL_RS      0b00000011111000000000000000000000
#define MASK_BGEZAL_OFFSET  0b00000000000000001111111111111111

/* Branch on Greater Than or Equal to Zero and Link Likely: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BGEZALL        0b00000100000100110000000000000000
#define MASK_BGEZALL_FORM   0b11111100000111110000000000000000
#define MASK_BGEZALL_RS     0b00000011111000000000000000000000
#define MASK_BGEZALL_OFFSET 0b00000000000000001111111111111111

/* Branch on Greater Than or Equal to Zero Likely: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BGEZL          0b00000100000000110000000000000000
#define MASK_BGEZL_FORM     0b11111100000111110000000000000000
#define MASK_BGEZL_RS       0b00000011111000000000000000000000
#define MASK_BGEZL_OFFSET   0b00000000000000001111111111111111

/* Branch on Greater Than Zero: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BGTZ           0b00011100000000000000000000000000
#define MASK_BGTZ_FORM      0b11111100000111110000000000000000
#define MASK_BGTZ_RS        0b00000011111000000000000000000000
#define MASK_BGTZ_OFFSET    0b00000000000000001111111111111111

/* Branch on Greater Than Zero Likely: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BGTZL          0b01011100000000000000000000000000
#define MASK_BGTZL_FORM     0b11111100000111110000000000000000
#define MASK_BGTZL_RS       0b00000011111000000000000000000000
#define MASK_BGTZL_OFFSET   0b00000000000000001111111111111111

/* Branch on Less Than Zero: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BLEZ           0b00011000000000000000000000000000
#define MASK_BLEZ_FORM      0b11111100000111110000000000000000
#define MASK_BLEZ_RS        0b00000011111000000000000000000000
#define MASK_BLEZ_OFFSET    0b00000000000000001111111111111111

/* Branch on Less Than Zero Likely: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BLEZL          0b01011000000000000000000000000000
#define MASK_BLEZL_FORM     0b11111100000111110000000000000000
#define MASK_BLEZL_RS       0b00000011111000000000000000000000
#define MASK_BLEZL_OFFSET   0b00000000000000001111111111111111

/* Branch on Less Than Zero: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BLTZ           0b00000100000000000000000000000000
#define MASK_BLTZ_FORM      0b11111100000111110000000000000000
#define MASK_BLTZ_RS        0b00000011111000000000000000000000
#define MASK_BLTZ_OFFSET    0b00000000000000001111111111111111

/* Branch on Less Than Zero and Link: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BLTZAL         0b00000100000100000000000000000000
#define MASK_BLTZAL_FORM    0b11111100000111110000000000000000
#define MASK_BLTZAL_RS      0b00000011111000000000000000000000
#define MASK_BLTZAL_OFFSET  0b00000000000000001111111111111111

/* Branch on Less Than Zero and Link Likely: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BLTZALL        0b00000100000100100000000000000000
#define MASK_BLTZALL_FORM   0b11111100000111110000000000000000
#define MASK_BLTZALL_RS     0b00000011111000000000000000000000
#define MASK_BLTZALL_OFFSET 0b00000000000000001111111111111111

/* Branch on Less Than Zero Likely: RRRRRR sssss BBBBB oooooooooooooooo */
#define MASK_BLTZL          0b00000100000000100000000000000000
#define MASK_BLTZL_FORM     0b11111100000111110000000000000000
#define MASK_BLTZL_RS       0b00000011111000000000000000000000
#define MASK_BLTZL_OFFSET   0b00000000000000001111111111111111

/* Trap if Equal Immediate:  */
#define MASK_TEQI           0b00000100000011000000000000000000
#define MASK_TEQI_FORM      0b11111100000111110000000000000000
#define MASK_TEQI_RS        0b00000011111000000000000000000000
#define MASK_TEQI_IMM       0b00000000000000001111111111111111

/* Trap if Greater or Equal Immediate: RRRRRR sssss TTTTT iiii iiii iiii iiii  */
#define MASK_TGEI           0b00000100000010000000000000000000
#define MASK_TGEI_FORM      0b11111100000111110000000000000000
#define MASK_TGEI_RS        0b00000011111000000000000000000000
#define MASK_TGEI_IMM       0b00000000000000001111111111111111

/* Trap if Greater or Equal Immediate Unsigned: RRRRRR sssss TTTTT iiii iiii iiii iiii  */
#define MASK_TGEIU          0b00000100000010010000000000000000
#define MASK_TGEIU_FORM     0b11111100000111110000000000000000
#define MASK_TGEIU_RS       0b00000011111000000000000000000000
#define MASK_TGEIU_IMM      0b00000000000000001111111111111111

/* Trap if Less Than Immediate: RRRRRR sssss TTTTT iiiiiiiiiiiiiiii */
#define MASK_TLTI           0b00000100000010100000000000000000
#define MASK_TLTI_FORM      0b11111100000111110000000000000000
#define MASK_TLTI_RS        0b00000011111000000000000000000000
#define MASK_TLTI_IMM       0b00000000000000001111111111111111

/* Trap if Less Than Immediate Unsigned: RRRRRR sssss TTTTT iiiiiiiiiiiiiiii */
#define MASK_TLTIU          0b00000100000010110000000000000000
#define MASK_TLTIU_FORM     0b11111100000111110000000000000000
#define MASK_TLTIU_RS       0b00000011111000000000000000000000
#define MASK_TLTIU_IMM      0b00000000000000001111111111111111

/* Trap if Not Equal Immediate: RRRRRR sssss TTTTT iiii iiii iiii iiii */
#define MASK_TNEI           0b00000100000011100000000000000000
#define MASK_TNEI_FORM      0b11111100000111110000000000000000
#define MASK_TNEI_RS        0b00000011111000000000000000000000
#define MASK_TNEI_IMM       0b00000000000000001111111111111111
'''

mask = '0b11111100000111110000000000000000'
i = 55
n = 3

tmp_l = re.findall('MASK_([0-9A-Z]+_FP|[0-9A-Z]+)', data)
my_set = set()
l = []
for e in tmp_l:
    if e not in my_set:
        l.append(e)
        my_set.add(e)
print l

print '/* ' + mask + ' */'
for s in l:
    print '#define ID_' + s + '  ' + str(i)
    i += 1

print '#define FindCorrespondingMnemonic'+ str(n) +'(code) {  \\'
print '    switch ( code & ' + mask + ' ) {  \\'

for s in l:
    print '    case MASK_' + s + ':  \\'
    print '        return ID_' + s + ';  \\'

print '    }  \\'
print '}'




